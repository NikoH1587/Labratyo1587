{
    "actions": [
    ],
    "decoder": 1,
    "frameDetection": 2,
    "frameEnd": "",
    "frameParser": "/// Student project\n/// Turku University of Applied Sciences, 2025\n/// niko.heiskanen@gmail.com\n \n/// Message length: 4-21 bytes\n/// Message Format: MID PID DATA PID DATA DATA CHECKSUM\n/// Messages can have multiple PID's\n \n/// MID 128 = ECU#1\n/// PID 0-127 Single character\n/// PID 128-191 Double character, Byte1 Byte0\n/// PID 192-530 Character amount is byte following PID;\n/// PID 254 and 255, Data link. rest of the message\n\n/// PID LIST:\n/// 1: 84 - Road Speed -  UInt 0.805 km/h\n/// 2: 91 - Percent Accelerator Pedal Position - UInt 0.4%\n/// 3: 92 - Percent Engine Load - Uint 0.5%\n/// 4: 100 - Engine Oil Pressure - UInt 3.45 kPa\n/// 5: 102 - Boost Pressure - UInt  0.862 kPa\n\n/// 6: 175 - Engine Oil Temperature - Sint 0.25 °F -> (°F - 32) * 5 / 9 °C;\n/// 7: 183 - Fuel Rate (Instantaneous) - UInt 16.428 x 10^-6 L/s -> L/s * 3600 = L/h\n/// 8: 184 - Instantaneous Fuel Economy - UInt 1.66072 x 10^-3 km/L\n/// 9: 190 - Engine Speed - UInt 0.25 rpm\n\n/// 10: 244 - Trip distance - ULInt 0.16 km\n\n/// Parameter Identification values ￼storage\nlet storage = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1];\n\n/// Data buffer\nlet buffer = new Array(42).fill(0);\n\n/// Arrays of known formats\nlet format_1 = [128,84,'_x',91,'_x',92,'_x',190,'_x','_x',85,'_x',121,'_x',183,'_x','_x',184,'_x','_x','_x'];\nlet format_2 = [128,105,'_x',108,'_x',110,'_x',168,'_x','_x',175,'_x','_x','_x'];\nlet format_3 = [128,71,'_x',83,'_x',89,'_x',100,'_x',102,'_x','_x'];\nlet format_4 = [128,244,4,'_x','_x','_x','_x',245,4,'_x','_x','_x','_x','_x'];\n/// Hexadecimal to decimal converter\nfunction hex2dec(byte) {\n    return parseInt(byte, 16); \n}\n \n/// Process buffer\nfunction buffering(data) {\n    buffer.push(...data);   \n    if (buffer.length > 42) {\n        buffer.splice(0, buffer.length - 42);\n    }\n}\n \n/// Get message from buffer\nfunction buffer2format(buffer, format) {\n    \n    for (let i = 0; i <= buffer.length - format.length; i++) {\n        let slice = buffer.slice(i, i + format.length);\n        let match = true;\n        \n        for (let j = 0; j < format.length; j++) {\n            if (format[j] !== '_x' && format[j] !== slice[j]) {\n                match = false;\n                break;\n            }\n        }\n        if (match) {\n            for (let k = i; k < i + format.length; k++) {\n                buffer[k] = 0;\n            }\n            return slice;\n        }\n    }\n    return [0];\n}\n\n/// Checksum calculator\nfunction calculateCKS(bytes) {\n    let sum = 0;\n    for (let i = 0; i < bytes.length; i++) {\n        sum += bytes[i];\n    }\n    return (256 - (sum % 256)) % 256;  // Two's complement\n} \n\n/// Message validator\nfunction validateMSG(message) {\n    let checksum = message[message.length - 1];\n    let removeCKS = message.slice(0, -1);\n    return calculateCKS(removeCKS) === checksum;\n} \n    \n/// Converts decimal to signed 16-bit integral\nfunction signedINT(byte1, byte0) {\n    let combined = (byte1 << 8) | byte0;\n    if (combined >= 32768) {\n        combined -= 65536;\n    }\n    return combined;\n}\n\n/// Converts decimal to unsigned 16-bit integral\nfunction unsignedINT(byte1, byte0) {\n    let combined2 = (byte1 << 8) | byte0;\n    return combined2;\n} \n\n/// Converts decimals to unsigned long integer\nfunction unsignedlongINT(byte3, byte2, byte1, byte0) {\n    let combined = (byte3 << 24) | (byte2 << 16) | (byte1 << 8) | byte0;\n    return combined;\n}\n\n/// Process PID values from a valid message\nfunction processPID(message, values) {\n    for (let i = 1; i < message.length - 1; i++) {\n        let pid = message[i];\n        switch (pid) {\n        \n            /// Single Character PIDs\n            case 84:\n                values[0] = message[i + 1] * 0.805;\n                i++;\n                break;\n\n            case 91:\n                values[1] = message[i + 1] * 0.4;\n                i++;\n                break;\n\n            case 92:\n                values[2] = message[i + 1] * 0.5;\n                i++;\n                break;\n\n            case 100:\n                values[3] = message[i + 1] * 3.45;\n                i++;\n                break;\n\n            case 102:\n                values[4] = message[i + 1] * 0.862;\n                i++;\n                break;\n\n            /// Two character PID\n            case 175:\n                let byte1_175 = message[i + 2];\n                let byte0_175 = message[i + 1];\n                let sint_175 = signedINT(byte1_175,byte0_175);        \n                values [5] = (((sint_175 * 0.25) - 32) * (5/9));\n                i += 2;\n                break;  \n                \n            case 183:\n                let byte1_183 = message[i + 2];\n                let byte0_183 = message[i + 1];\n                let usint_183 = unsignedINT(byte1_183,byte0_183);       \n                values [6] = usint_183 * 0.0591408;\n                i += 2;\n                break;\n                \n             case 184: \n                let byte1_184 = message[i + 2];\n                let byte0_184 = message[i + 1];\n                let usint_184 = unsignedINT(byte1_184,byte0_184);        \n                values [7] = usint_184 * 0.00166072;\n                i += 2;\n                break;      \n                                                                                \n            case 190: \n                let byte1_190 = message[i + 2];\n                let byte0_190 = message[i + 1];\n                let usint_190 = unsignedINT(byte1_190,byte0_190);        \n                values [8] = usint_190 * 0.25;\n                i += 2;\n                break;\n                \n            case 244:\n                let byte3_244 = message[i + 5];  \n                let byte2_244 = message[i + 4];\n                let byte1_244 = message[i + 3];\n                let byte0_244 = message[i + 2];\n                let ulongsint_244 = unsignedlongINT(byte3_244, byte2_244, byte1_244, byte0_244);\n                values [9] = ulongsint_244 * 0.16;\n                i += 6;\n                break;        \n                 \n                \n            default:\n                if (pid >= 128 && pid <= 191) {\n                    i += 2;\n                    break;\n                } else {\n                    i ++;\n                    break;\n                }\n        }\n    }\n}\n \n/// Frame parser\nfunction parse(frame) {\n    let data = [];\n    let values = storage;\n\n    /// Convert frame hex to decimal\n    for (let i = 0; i < frame.length; i += 2) {\n        let hex = frame.substring(i, i + 2);\n        let decimal = hex2dec(hex);\n        data.push(decimal);\n    }\n\n    /// Send data to buffering\n    buffering(data);\n    \n    /// Retrieve message\n    let message_1 = buffer2format(buffer, format_1);\n    let message_2 = buffer2format(buffer, format_2);\n    let message_3 = buffer2format(buffer, format_3);\n    let message_4 = buffer2format(buffer, format_4);\n    \n    /// Validate messages\n    let isValid_1 = false;\n    let isValid_2 = false;\n    let isValid_3 = false;\n    let isValid_4 = false;\n    \n    if (message_1 !== [0]) {\n        isValid_1 = validateMSG(message_1);\n    }\n\n    if (message_2 !== [0]) {\n        isValid_2 = validateMSG(message_2);\n    }   \n\n    if (message_3 !== [0]) {\n        isValid_3 = validateMSG(message_3);\n    }    \n    \n    if (message_4 !== [0]) {\n        isValid_4 = validateMSG(message_4);\n    }                                          \n\n    /// Get values if message is valid\n    if (isValid_1) {\n        processPID(message_1, values);\n    }\n\n    if (isValid_2) {\n        processPID(message_2, values);\n    }\n    \n    if (isValid_3) {\n        processPID(message_3, values);\n    }    \n   \n    if (isValid_4) {\n        processPID(message_4, values);\n    }\n    \n    /// Debug logging\n    ///console.log(\"Raw frame:\", frame);\n    ///console.log(\"Buffer: \", buffer);\n    ///console.log(\"Message 1: \", message_1);\n    ///console.log(\"Message 2: \", message_2);\n    ///console.log(\"Message 3: \", message_3);    \n    storage = values;\n    return values;\n}",
    "frameStart": "$",
    "groups": [
        {
            "datasets": [
                {
                    "alarm": 0,
                    "fft": false,
                    "fftSamples": 256,
                    "fftSamplingRate": 100,
                    "graph": true,
                    "index": 1,
                    "led": false,
                    "ledHigh": 1,
                    "log": false,
                    "max": 0,
                    "min": 0,
                    "title": "Road Speed",
                    "units": "km/h",
                    "value": "--.--",
                    "widget": ""
                },
                {
                    "alarm": 0,
                    "fft": false,
                    "fftSamples": 256,
                    "fftSamplingRate": 100,
                    "graph": true,
                    "index": 2,
                    "led": false,
                    "ledHigh": 1,
                    "log": false,
                    "max": 0,
                    "min": 0,
                    "title": "Accelerator Pedal",
                    "units": "%",
                    "value": "--.--",
                    "widget": ""
                },
                {
                    "alarm": 0,
                    "fft": false,
                    "fftSamples": 256,
                    "fftSamplingRate": 100,
                    "graph": true,
                    "index": 3,
                    "led": false,
                    "ledHigh": 1,
                    "log": false,
                    "max": 0,
                    "min": 0,
                    "title": "Engine Load",
                    "units": "%",
                    "value": "--.--",
                    "widget": ""
                },
                {
                    "alarm": 0,
                    "fft": false,
                    "fftSamples": 256,
                    "fftSamplingRate": 100,
                    "graph": true,
                    "index": 4,
                    "led": false,
                    "ledHigh": 1,
                    "log": false,
                    "max": 0,
                    "min": 0,
                    "title": "Oil Pressure",
                    "units": "kPa",
                    "value": "--.--",
                    "widget": ""
                },
                {
                    "alarm": 0,
                    "fft": false,
                    "fftSamples": 256,
                    "fftSamplingRate": 100,
                    "graph": true,
                    "index": 5,
                    "led": false,
                    "ledHigh": 1,
                    "log": false,
                    "max": 0,
                    "min": 0,
                    "title": "Boost Pressure",
                    "units": "kPa",
                    "value": "--.--",
                    "widget": ""
                },
                {
                    "alarm": 0,
                    "fft": false,
                    "fftSamples": 256,
                    "fftSamplingRate": 100,
                    "graph": true,
                    "index": 6,
                    "led": false,
                    "ledHigh": 1,
                    "log": false,
                    "max": 0,
                    "min": 0,
                    "title": "Oil Temperature",
                    "units": "°C",
                    "value": "--.--",
                    "widget": ""
                },
                {
                    "alarm": 0,
                    "fft": false,
                    "fftSamples": 256,
                    "fftSamplingRate": 100,
                    "graph": true,
                    "index": 7,
                    "led": false,
                    "ledHigh": 1,
                    "log": false,
                    "max": 0,
                    "min": 0,
                    "title": "Fuel Rate",
                    "units": "L/h",
                    "value": "--.--",
                    "widget": ""
                },
                {
                    "alarm": 0,
                    "fft": false,
                    "fftSamples": 256,
                    "fftSamplingRate": 100,
                    "graph": true,
                    "index": 8,
                    "led": false,
                    "ledHigh": 1,
                    "log": false,
                    "max": 0,
                    "min": 0,
                    "title": "Fuel Economy",
                    "units": "km/L",
                    "value": "--.--",
                    "widget": ""
                },
                {
                    "alarm": 0,
                    "fft": false,
                    "fftSamples": 256,
                    "fftSamplingRate": 100,
                    "graph": true,
                    "index": 9,
                    "led": false,
                    "ledHigh": 1,
                    "log": false,
                    "max": 0,
                    "min": 0,
                    "title": "Engine Speed",
                    "units": "rpm",
                    "value": "--.--",
                    "widget": ""
                },
                {
                    "alarm": 0,
                    "fft": false,
                    "fftSamples": 256,
                    "fftSamplingRate": 100,
                    "graph": false,
                    "index": 10,
                    "led": false,
                    "ledHigh": 1,
                    "log": false,
                    "max": 0,
                    "min": 0,
                    "title": "Trip Distance",
                    "units": "km",
                    "value": "--.--",
                    "widget": ""
                }
            ],
            "title": "Multiple Plot",
            "widget": "datagrid"
        }
    ],
    "mapTilerApiKey": "",
    "thunderforestApiKey": "",
    "title": "Sisu J1587"
}
